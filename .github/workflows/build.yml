name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  QT_VERSION: 6.5.0
  CMAKE_VERSION: 3.24.0
  BUILD_TYPE: Release
  PROJECT_NAME: recursive_n_queens_mit_qt

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
          - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            cc: "gcc",
            cxx: "g++"
          }
          - {
            name: "macOS Latest Clang",
            os: macos-latest,
            cc: "clang",
            cxx: "clang++"
          }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Qt (Windows)
        if: runner.os == 'Windows'
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{env.QT_VERSION}}
          host: windows
          target: desktop
          arch: win64_msvc2019_64
          dir: ${{github.workspace}}/qt
          setup-python: false

      - name: Install Qt (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y qt6-base-dev qt6-declarative-dev

      - name: Install Qt (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install qt@6

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: ${{env.CMAKE_VERSION}}

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Configuring CMake for Windows..."
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DQt6_DIR=${{github.workspace}}/qt/lib/cmake/Qt6
          echo "CMake configuration completed."

      - name: Configure CMake (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Configuring CMake for Unix..."
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          echo "CMake configuration completed."

      - name: Build
        run: |
          echo "Starting build process..."
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
          echo "Build completed."

      - name: Package Windows
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo "Starting Windows packaging..."
          mkdir package
          
          echo "Searching for executable..."
          if exist "build\${{env.BUILD_TYPE}}\${{env.PROJECT_NAME}}.exe" (
            echo "Found executable in build\${{env.BUILD_TYPE}}"
            copy "build\${{env.BUILD_TYPE}}\${{env.PROJECT_NAME}}.exe" package\
          ) else if exist "build\${{env.PROJECT_NAME}}.exe" (
            echo "Found executable in build"
            copy "build\${{env.PROJECT_NAME}}.exe" package\
          ) else (
            echo "Error: Could not find executable. Directory contents:"
            dir /s build\*.exe
            exit 1
          )
          
          echo "Running windeployqt..."
          windeployqt --no-translations package\${{env.PROJECT_NAME}}.exe
          
          echo "Windows packaging completed."

      - name: Package Unix
        if: runner.os != 'Windows'
        run: |
          echo "Starting Unix packaging..."
          mkdir -p package
          if [ -f "build/${{env.PROJECT_NAME}}" ]; then
            echo "Found executable in build/"
            cp "build/${{env.PROJECT_NAME}}" package/
          else
            echo "Error: Could not find executable. Directory contents:"
            find build -type f -executable
            exit 1
          fi
          echo "Unix packaging completed."

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.PROJECT_NAME}}-${{ runner.os }}
          path: ${{github.workspace}}/package/
          compression-level: 9