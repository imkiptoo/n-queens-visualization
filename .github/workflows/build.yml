name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  QT_VERSION: 6.5.0
  CMAKE_VERSION: 3.24.0
  BUILD_TYPE: Release
  PROJECT_NAME: recursive_n_queens_mit_qt

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            cc: "cl",
            cxx: "cl",
            artifact_name: "windows-x64"
          }
          - {
            name: "Ubuntu Latest GCC",
            os: ubuntu-latest,
            cc: "gcc",
            cxx: "g++",
            artifact_name: "linux-x64"
          }
          - {
            name: "macOS Latest Clang",
            os: macos-latest,
            cc: "clang",
            cxx: "clang++",
            artifact_name: "macos-x64"
          }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version information
        id: version
        shell: bash
        run: |
          # Get the build number (commit count)
          echo "BUILD_NUMBER=$(git rev-list --count HEAD)" >> $GITHUB_ENV
          
          # Get short SHA
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          
          # Set version based on tag or development build
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
            echo "IS_RELEASE=true" >> $GITHUB_ENV
          else
            echo "VERSION=dev-build.${{ env.BUILD_NUMBER }}" >> $GITHUB_ENV
            echo "IS_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Install Qt (Windows)
        if: runner.os == 'Windows'
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{env.QT_VERSION}}
          host: windows
          target: desktop
          arch: win64_msvc2019_64
          dir: ${{github.workspace}}/qt
          setup-python: false

      - name: Install Qt (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y qt6-base-dev qt6-declarative-dev

      - name: Install Qt (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install qt@6

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: ${{env.CMAKE_VERSION}}

      - name: Configure CMake
        run: |
          cmake -B ${{github.workspace}}/build \
                -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
                -DPROJECT_VERSION="${{ env.VERSION }}"

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Package Windows
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          mkdir package
          copy "build\${{env.BUILD_TYPE}}\${{env.PROJECT_NAME}}.exe" "package\${{env.PROJECT_NAME}}.exe"
          windeployqt --no-translations "package\${{env.PROJECT_NAME}}.exe"
          cd package
          7z a -tzip "..\${{env.PROJECT_NAME}}-${{ matrix.config.artifact_name }}-${{ env.VERSION }}.zip" *

      - name: Package Unix
        if: runner.os != 'Windows'
        run: |
          mkdir -p package
          cp "build/${{env.PROJECT_NAME}}" package/
          cd package
          if [ "${{ runner.os }}" == "Linux" ]; then
            tar czf "../${{env.PROJECT_NAME}}-${{ matrix.config.artifact_name }}-${{ env.VERSION }}.tar.gz" *
          else
            zip -r "../${{env.PROJECT_NAME}}-${{ matrix.config.artifact_name }}-${{ env.VERSION }}.zip" *
          fi

      - name: Create Release
        if: github.event_name != 'pull_request'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.IS_RELEASE == 'true' && env.VERSION || 'dev-build' }}
          name: ${{ env.IS_RELEASE == 'true' && format('Release {0}', env.VERSION) || format('Development Build {0} ({1})', env.BUILD_NUMBER, env.SHA_SHORT) }}
          files: |
            ${{env.PROJECT_NAME}}-${{ matrix.config.artifact_name }}-${{ env.VERSION }}.*
          prerelease: ${{ env.IS_RELEASE != 'true' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}